datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int           @id @default(autoincrement())
  token              String        @unique
  password           String
  name               String
}

model CutRecord {
  id           Int       @id @default(autoincrement())
  code         String
  pieceAmount  Int
  line1        String
  line2        String
  limiteDate   DateTime
  comment      String?  // Campo opcional para comentários
  supplier     String
  status       String   @default("in progress")  // Status padrão
  image        Bytes?   // Campo opcional para imagens
  createdAt    DateTime @default(now())  // Data de criação automática
  updatedAt    DateTime @default(now()) @updatedAt  // Data de atualização automática
  employeeId   Int
  employee     Employee @relation("EmployeeCutRecords", fields: [employeeId], references: [id])
}

model OperationRecord {
  id             Int      @id @default(autoincrement())
  cutType        String   // Tipo de corte
  operationName  String   // Nome da operação
  calculatedTime String   // Tempo calculado (formato HH:MM:SS)
  createdAt      DateTime @default(now())  // Data de criação automática
}

model Employee {
  id           Int         @id @default(autoincrement())
  name         String
  roleId       Int
  entryDate    DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  cutRecords   CutRecord[] @relation("EmployeeCutRecords")
  performances Performance[]
  reports      Report[]    @relation("EmployeeReports")
  role         Role       @relation(fields: [roleId], references: [id])
}

model Role {
  id           Int         @id @default(autoincrement())
  title        String      @unique  // Nome da função ou cargo
  description  String?     // Descrição opcional da função
  employees    Employee[]  // Lista de funcionários com essa função
}

model Performance {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  date        DateTime  
  schedules   Json      // Armazena os horários em formato JSON
  produced    Int
  meta        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Report {
  id         Int      @id @default(autoincrement())
  reportData String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id], name: "EmployeeReports")
}
