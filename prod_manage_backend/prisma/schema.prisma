datasource db {
  provider = "postgresql"
  url = "postgresql://prod_manage_database_mwh8_user:x4fwBugkQQYN9wYNsftKc0JD1ZJ0X2z9@dpg-cs23p93qf0us73a1d7d0-a.oregon-postgres.render.com/prod_manage_database_mwh8"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  token    String @unique
  password String
  name     String
}

model CutRecord {
  id             Int          @id @default(autoincrement())
  code           String
  pieceAmount    Int
  line1          String
  line2          String
  limiteDate     DateTime
  comment        String?  
  supplier       String
  status         String       @default("in progress")
  selectedOperations Json? 
  image          Bytes?  
  createdAt      DateTime     @default(now())  
  updatedAt      DateTime     @default(now()) @updatedAt  
}

model OperationRecord {
  id             Int      @id @default(autoincrement())
  operationName  String   @unique
  createdAt      DateTime @default(now())
}

model Employee {
  id           Int         @id @default(autoincrement())
  name         String
  roleId       Int
  entryDate    DateTime
  temporary    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  performances Performance[] 
  role         Role        @relation(fields: [roleId], references: [id])
}

model Role {
  id           Int         @id @default(autoincrement())
  title        String      @unique  
  description  String?     
  employees    Employee[]  
}

model Performance {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  date        DateTime  
  schedules   Json      
  produced    Int
  meta        Int
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}
